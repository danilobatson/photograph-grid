import React, { useReducer, useEffect } from 'react';
import axios from 'axios';
import styles from '../styles/Home.module.css';

import Head from 'next/head';

import {
  Description,
  ImageGrid,
  ImageUpload,
  InputUpload,
} from './components/';

export type ImageType = {
  newId: number;
  imageSrc: string;
  photoName: string;
};

interface State {
  imageSrc: string;
  search: string;
  uploadData: string | undefined;
  images?: ImageType[];
  name: string;
}

const initialState: State = {
  imageSrc: '',
  search: '',
  uploadData: '',
  images: [],
  name: '',
};

type ACTIONTYPE =
  | { type: 'SET_IMAGES'; payload: ImageType[] }
  | { type: 'SET_IMAGE_SRC'; payload: string }
  | { type: 'SET_SEARCH'; payload: string }
  | { type: 'SET_UPLOAD_DATA'; payload: string | undefined }
  | { type: 'SET_NAME'; payload: string };

export default function Home() {
  const reducer = (state: State, action: ACTIONTYPE) => {
    switch (action.type) {
      case 'SET_IMAGES':
        return { ...state, images: action.payload };
      case 'SET_IMAGE_SRC':
        return { ...state, imageSrc: action.payload };
      case 'SET_SEARCH':
        return { ...state, search: action.payload };
      case 'SET_UPLOAD_DATA':
        return { ...state, uploadData: action.payload };
      case 'SET_NAME':
        return { ...state, name: action.payload };
      default:
        return state;
    }
  };

  const [state, dispatch] = useReducer(reducer, initialState);

  const { search, name, images, uploadData, imageSrc } = state;

  const updateSearch = (e: React.SyntheticEvent) => {
    const target = e.target as HTMLInputElement;
    dispatch({ type: 'SET_SEARCH', payload: target.value });
  };

  const changeName = (e: React.SyntheticEvent) => {
    const target = e.target as HTMLInputElement;
    dispatch({ type: 'SET_NAME', payload: target.value });
  };

  function handleOnChange(event: React.SyntheticEvent) {
    const target = event.target as HTMLInputElement;
    const reader = new FileReader();

    let size;
    let file;

    if (target.files) {
      file = target.files[0];
      size = target.files[0].size;
      reader.readAsDataURL(file);
    }

    if (size && size > 1000000) {
      alert('File too large');
      return;
    }

    reader.onload = function (onLoadEvent) {
      dispatch({
        type: 'SET_IMAGE_SRC',
        payload: onLoadEvent.target?.result as string,
      });
      dispatch({ type: 'SET_UPLOAD_DATA', payload: undefined });
    };
  }

  const submitImage = async (event: React.SyntheticEvent) => {
    event.preventDefault();

    const form = event.target;

    //@ts-ignore
    const nameInput: HTMLInputElement = Array.from(form.elements).find(
      //@ts-ignore
      ({ name }) => {
        return name === 'name';
      }
    );

    const photoName = nameInput.value;

    let newImage: ImageType = {
      newId: 1,
      imageSrc: imageSrc,
      photoName,
    };

    if (images) {
      newImage.newId = images.length + 1;
    }

    axios
      .post('/api/photos', { newImage })
      .then(function (response) {
        console.log(response);
      })
      .catch(function (error) {
        console.log(error);
      });

    dispatch({
      type: 'SET_IMAGES',
      payload: [...(images as ImageType[]), newImage],
    });
    dispatch({
      type: 'SET_IMAGE_SRC',
      payload: '' as string,
    });
    dispatch({
      type: 'SET_NAME',
      payload: '' as string,
    });

    const { target } = event;
    if (target instanceof HTMLFormElement) {
      target.reset();
    }
  };

  useEffect(() => {
    const imagesSearch = (data: ImageType[]) => {
      console.log('search');
      const filter = data.filter((image) => {
        const searchTerm = search.toLowerCase();
        return image.photoName.toLowerCase().includes(searchTerm);
      });
      return filter;
    };

    axios.get<ImageType[]>('/api/photos').then((res) => {
      const data = imagesSearch(res.data);
      dispatch({ type: 'SET_IMAGES', payload: data });
    });
  }, [search, imageSrc]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          paddingTop: '2rem',
          alignItems: 'stretch',
        }}
      >
        <div className={styles.flexColumn}>
          <div>
            <input
              type='text'
              value={search}
              onChange={updateSearch}
              placeholder='Search images...'
            />
          </div>
          <div className={styles.imagesCount}>
            {images && images.length} images
          </div>
        </div>
        <div>
          <h1 className={styles.title}>Image Uploader</h1>
          <Description />
        </div>
        <form method='post' onSubmit={submitImage}>
          <InputUpload
            name={name}
            handleOnChange={handleOnChange}
            changeName={changeName}
          />
          {imageSrc && !uploadData && (
            <ImageUpload name={name} imageSrc={imageSrc} />
          )}
        </form>
      </div>
      <main className={styles.main}>
        <div className={styles.grid}>
          {images &&
            images.map((image) => {
              return <ImageGrid key={image.newId} image={image} />;
            })}
        </div>
      </main>
    </div>
  );
}
